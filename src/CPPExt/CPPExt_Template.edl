-- File:	CPPExt_Template.edl
-- Author:	Kernel (CLE)
-- History:	Tue Sep 19 17:25:59 1995	Kernel	Creation
-- Copyright:	Matra Datavision 1995
-- Purpose:     C++ extractor

-- ====================================
-- for extraction of a transient handle
-- ====================================

@verboseoff;

@template HandleTransient (%HTName,%HTInherits) is
$// File generated by CPPExt (Transient)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#ifndef _Handle_%HTName_HeaderFile
$#define _Handle_%HTName_HeaderFile
$
$#ifndef _Standard_Macro_HeaderFile
$#include <Standard_Macro.hxx>
$#endif
$#ifndef _Standard_HeaderFile
$#include <Standard.hxx>
$#endif
$
$#ifndef _Handle_%HTInherits_HeaderFile
$#include <Handle_%HTInherits.hxx>
$#endif
$
$class Standard_Transient;
$class Handle_Standard_Type;
$class Handle(%HTInherits);
$class %HTName;
$Standard_EXPORT Handle_Standard_Type& STANDARD_TYPE(%HTName);
$
$class Handle(%HTName) : public Handle(%HTInherits) {
$  public:
$    void* operator new(size_t,void* anAddress) 
$      {
$        return anAddress;
$      }
$    void* operator new(size_t size) 
$      { 
$        return Standard::Allocate(size); 
$      }
$    void  operator delete(void *anAddress) 
$      { 
$        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
$      }
$    Handle(%HTName)():Handle(%HTInherits)() {} 
$    Handle(%HTName)(const Handle(%HTName)& aHandle) : Handle(%HTInherits)(aHandle) 
$     {
$     }
$
$    Handle(%HTName)(const %HTName* anItem) : Handle(%HTInherits)((%HTInherits *)anItem) 
$     {
$     }
$
$    Handle(%HTName)& operator=(const Handle(%HTName)& aHandle)
$     {
$      Assign(aHandle.Access());
$      return *this;
$     }
$
$    Handle(%HTName)& operator=(const %HTName* anItem)
$     {
$      Assign((Standard_Transient *)anItem);
$      return *this;
$     }
$
$    %HTName* operator->() 
$     {
$      return (%HTName *)ControlAccess();
$     }
$
$    %HTName* operator->() const 
$     {
$      return (%HTName *)ControlAccess();
$     }
$
$   Standard_EXPORT ~Handle(%HTName)();
$ 
$   Standard_EXPORT static const Handle(%HTName) DownCast(const Handle(Standard_Transient)& AnObject);
$};
$#endif
@end;


-- ===============================
-- extraction of a transient class
-- ===============================

@template TransientInstClass (%ClassComment,
			      %Class,
                              %TICIncludes,
                              %Inherits,
                              %TICPublicmets,
                              %TICPublicfriends,
                              %TICProtectedmets,
                              %TICProtectedfields,
                              %TICPrivatemets,
                              %TICPrivatefields,
                              %TICPrivatefriends,
                              %TICDefines,
                              %TICInlineIncludes,
                              %TICUndefines,
                              %TICSuppMethod) is
$// File generated by CPPExt (Transient)
$//
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$
$#ifndef _Standard_HeaderFile
$#include <Standard.hxx>
$#endif
$#ifndef _Handle_%Class_HeaderFile
$#include <Handle_%Class.hxx>
$#endif
$
$%TICIncludes
$
$%ClassComment
$class %Class : public %Inherits {
$
$public:
$
$    void* operator new(size_t,void* anAddress) 
$      {
$        return anAddress;
$      }
$    void* operator new(size_t size) 
$      { 
$        return Standard::Allocate(size); 
$      }
$    void  operator delete(void *anAddress) 
$      { 
$        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
$      }
$ // Methods PUBLIC
$ // 
$%TICPublicmets
$
$%TICPublicfriends
$
$ // Type management
$ //
$ Standard_EXPORT friend Handle_Standard_Type& %Class_Type_();
$ Standard_EXPORT const Handle(Standard_Type)& DynamicType() const;
$ Standard_EXPORT Standard_Boolean	       IsKind(const Handle(Standard_Type)&) const;
$
$protected:
$
$ // Methods PROTECTED
$ // 
$%TICProtectedmets
$
$ // Fields PROTECTED
$ //
$%TICProtectedfields
$
$private: 
$
$ // Methods PRIVATE
$ // 
$%TICPrivatemets
$
$ // Fields PRIVATE
$ //
$%TICPrivatefields
$%TICPrivatefriends
$};
$
$%TICDefines
$%TICInlineIncludes
$%TICUndefines
$
$// other Inline functions and methods (like "C++: function call" methods)
$//
$%TICSuppMethod
$
$#endif
@end;

@template TransientIxx (%Class,%Suffix,%Supplement,%TypeMgt,%Methods) is
$// File generated by CPPExt (Transient)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#include <%Class.%Suffix>
$
$#ifndef _Standard_TypeMismatch_HeaderFile
$#include <Standard_TypeMismatch.hxx>
$#endif
$
$%Supplement 
$
$%TypeMgt
$
$%Methods
@end;

-- ================================
-- extraction of a normal c++ class
-- ================================

@template MPVClass (%ClassComment,
                    %Class,
                    %TICIncludes,
                    %Inherits,
                    %TICPublicmets,
                    %TICPublicfriends,
                    %TICProtectedmets,
                    %TICProtectedfields,
                    %TICPrivatemets,
                    %TICPrivatefields,
                    %TICPrivatefriends,
                    %TICDefines,
                    %TICInlineIncludes,
                    %TICUndefines,
                    %TICSuppMethod) is
$// File generated by CPPExt (Value)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$
$%TICIncludes
$
$#ifndef _Standard_HeaderFile
$#include <Standard.hxx>
$#endif
$#ifndef _Standard_Macro_HeaderFile
$#include <Standard_Macro.hxx>
$#endif
$
$%ClassComment
$class %Class %Inherits {
$
$public:
$
$    void* operator new(size_t,void* anAddress) 
$      {
$        return anAddress;
$      }
$    void* operator new(size_t size) 
$      { 
$        return Standard::Allocate(size); 
$      }
$    void  operator delete(void *anAddress) 
$      { 
$        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
$      }
$ // Methods PUBLIC
$ // 
$%TICPublicmets
$
$%TICPublicfriends
$
$
$protected:
$
$ // Methods PROTECTED
$ // 
$%TICProtectedmets
$
$ // Fields PROTECTED
$ //
$%TICProtectedfields
$
$private: 
$
$ // Methods PRIVATE
$ // 
$%TICPrivatemets
$
$ // Fields PRIVATE
$ //
$%TICPrivatefields
$%TICPrivatefriends
$};
$
$%TICDefines
$%TICInlineIncludes
$%TICUndefines
$
$// other Inline functions and methods (like "C++: function call" methods)
$//
$%TICSuppMethod
$
$#endif
@end;

@template MPVIxx (%Class,%Suffix,%Supplement,%Methods) is
$// File generated by CPPExt (Value)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#include <%Class.%Suffix>
$
$%Supplement 
$
$%Methods
@end;

-- ==============================
-- extraction of a storable class
-- ==============================

@template StorableClass(%ClassComment,
                        %Class,
                        %TICIncludes,
                        %Inherits,
                        %TICPublicmets,
                        %TICPublicfriends,
                        %TICProtectedmets,
                        %TICProtectedfields,
                        %TICPrivatemets,
                        %TICPrivatefields,
                        %TICPrivatefriends,
                        %TICDefines,
                        %TICInlineIncludes,
                        %TICUndefines,
                        %TICSuppMethod) is
$// File generated by CPPExt (Storable)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$
$%TICIncludes
$
$#ifndef _Standard_HeaderFile
$#include <Standard.hxx>
$#endif
$#ifndef _Standard_Macro_HeaderFile
$#include <Standard_Macro.hxx>
$#endif
$
$Standard_EXPORT Handle_Standard_Type& %Class_Type_();
$
$%ClassComment
$class %Class %Inherits {
$
$public:
$    void* operator new(size_t,void* anAddress) 
$      {
$        return anAddress;
$      }
$    void* operator new(size_t size) 
$      { 
$        return Standard::Allocate(size); 
$      }
$    void  operator delete(void *anAddress) 
$      { 
$        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
$      }
$
$ // Methods PUBLIC
$ // 
$%TICPublicmets
$
$%TICPublicfriends
$
$ // Type management
$ //
$ Standard_EXPORT friend Handle_Standard_Type& %Class_Type_();
$
$protected:
$
$ // Methods PROTECTED
$ // 
$%TICProtectedmets
$
$ // Fields PROTECTED
$ //
$%TICProtectedfields
$
$private: 
$
$ // Methods PRIVATE
$ // 
$%TICPrivatemets
$
$ // Fields PRIVATE
$ //
$%TICPrivatefields
$%TICPrivatefriends
$};
$
$%TICDefines
$%TICInlineIncludes
$%TICUndefines
$
$// other Inline functions and methods (like "C++: function call" methods)
$//
$%TICSuppMethod
$
$#endif
@end;

@template StorableIxx(%Class,%Suffix,%Supplement,%Methods) is
$// File generated by CPPExt (Storable)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#include <%Class.%Suffix>
$
$#ifndef _Standard_Type_HeaderFile
$#include <Standard_Type.hxx>
$#endif
$#ifndef _Standard_TypeMismatch_HeaderFile
$#include <Standard_TypeMismatch.hxx>
$#endif
$
$%Supplement 
$
$%Methods
@end;

-- ===============
-- Enum extraction
-- ===============

@template EnumHXX(%EnumComment,%Class,%Values) is
$// File generated by CPPExt (Enum)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$
$%EnumComment
$enum %Class { 
$ %Values
$};
$
$
$#ifndef _Standard_PrimitiveTypes_HeaderFile
$#include <Standard_PrimitiveTypes.hxx>
$#endif
$
$#endif
@end;

@template EnumCXX(%Class,%Values,%Nb) is
$// File generated by CPPExt (Enum)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
@end;

-- ================
-- Alias extraction
-- ================
@template AliasHXX(%Class,%Inherits, %HandleTypedef) is
$// File generated by CPPExt (Alias)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$#ifndef _%Inherits_HeaderFile
$#include <%Inherits.hxx>
$#endif
$
$typedef %Inherits %Class;
$%HandleTypedef
$
$#define %Class_Type_() %Inherits_Type_()
$#endif
@end;

-- ==================
-- Pointer extraction
-- ==================

@template PointerHXX(%Class,%Inherits) is
$// File generated by CPPExt (Pointer)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$
$class %Inherits;
$
$typedef %Inherits* %Class;
$
$#endif
@end;

-- =====================
-- Exceptions extraction
-- =====================
@template ExceptionHXX(%Class,%Inherits) is
$// File generated by CPPExt (Exception)
$//
$//                     Copyright (C) 1991 - 2000 by  
$//                      Matra Datavision SA.  All rights reserved.
$//  
$//                     Copyright (C) 2001 - 2004 by
$//                     Open CASCADE SA.  All rights reserved.
$// 
$// This file is part of the Open CASCADE Technology software.
$//
$// This software may be distributed and/or modified under the terms and
$// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
$// and appearing in the file LICENSE included in the packaging of this file.
$//  
$// This software is distributed on an "AS IS" basis, without warranty of any
$// kind, and Open CASCADE SA hereby disclaims all such warranties,
$// including without limitation, any warranties of merchantability, fitness
$// for a particular purpose or non-infringement. Please see the License for
$// the specific terms and conditions governing rights and limitations under the
$// License.
$
$#ifndef _%Class_HeaderFile
$#define _%Class_HeaderFile
$
$#ifndef _Standard_HeaderFile
$#include <Standard.hxx>
$#endif
$#ifndef _Handle_%Class_HeaderFile
$#include <Handle_%Class.hxx>
$#endif
$
$#ifndef _Standard_SStream_HeaderFile
$#include <Standard_SStream.hxx>
$#endif
$
$
$#ifndef _%Inherits_HeaderFile
$#include <%Inherits.hxx>
$#endif
$
$
$#if !defined No_Exception && !defined No_%Class
$#define %Class_Raise_if(CONDITION,MESSAGE) \
$  if (CONDITION) %Class::Raise(MESSAGE);
$#else
$#define %Class_Raise_if(CONDITION,MESSAGE)
$#endif
$
$class %Class : public %Inherits {
$
$    void* operator new(size_t,void* anAddress) 
$      {
$        return anAddress;
$      }
$    void* operator new(size_t size) 
$      { 
$        return Standard::Allocate(size); 
$      }
$    void  operator delete(void *anAddress) 
$      { 
$        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
$      }
$public:
$ Standard_EXPORT static void Raise(const Standard_CString aMessage = "");
$ Standard_EXPORT static void Raise(Standard_SStream& aReason);
$#ifndef NO_CXX_EXCEPTION
$ Standard_EXPORT virtual void Throw() const ;
$#endif
$
$ Standard_EXPORT ~%Class();
$
$ // Type methods
$ //
$ Standard_EXPORT friend Handle_Standard_Type& %Class_Type_();
$ Standard_EXPORT const Handle(Standard_Type)& DynamicType() const;			
$ Standard_EXPORT Standard_Boolean             IsKind(const Handle(Standard_Type)&) const;
$};
$
$#endif
@end;

@template ExceptionMethod(%Class) is
$#ifndef _Standard_Macro_HeaderFile
$#include <Standard_Macro.hxx>
$#endif
$%Class::~%Class(){}
$
$void %Class::Raise(Standard_SStream& aReason) 
${
$  Handle(%Class) _E(new %Class);
$  _E->Reraise (GetSString(aReason));
$}
$
$void %Class::Raise(const Standard_CString AString) 
${
$  Handle(%Class) _E (new %Class);
$  _E->Reraise(AString);
$}
$#ifndef NO_CXX_EXCEPTION
$void %Class::Throw() const
${
$  throw %Class() ;
$}
$#endif
@end;

-- ==============
-- misc templates
-- ==============

@template Include(%IClass,%Suffix) is
$#ifndef _%IClass_HeaderFile
$#include <%IClass.%Suffix>
$#endif
@end; 

@template IncludeNoSafe(%IClass,%Suffix) is
$#include <%IClass.%Suffix>
@end; 

@template Define(%DName,%DValue) is
$#define %DName %DValue
@end;

@template ItemDefine(%DName,%DValue,%DBaseValue) is
$#define %DName %DValue
$#define %DName_hxx <%DBaseValue.hxx>
@end;

@template ItemConstraintHandle(%DName,%DValue) is
$#define Handle_%DName Handle_%DValue
@end;

@template ItemHandleDefine (%DName,%DValue) is
$#define Handle_%DName Handle_%DValue
$#define %DName_Type_() %DValue_Type_()
@end;

@template Undefine(%DName) is
$#undef %DName
@end;

@template ItemUndefine(%DName) is
$#undef %DName
$#undef %DName_hxx
@end;

@template ItemConstraintHandleUndef(%DName) is
$#undef Handle_%DName
@end;

@template ItemHandleUndefine(%DName) is
$#undef Handle_%DName
$#undef %DName_Type_
@end;

@template ShortDec(%IClass) is
$class %IClass;
@end;

-- ==============================================
-- Methods templates
-- ==============================================

@template ConstructorHeader(%Class,%Arguments) is
$%Class(%Arguments)\^
@end;

@template MethodHeader(%Virtual,%RetSpec,%Return,%And,%MethodName,%Arguments,%MetSpec) is
$%Virtual %RetSpec %Return%And %MethodName(%Arguments) %MetSpec\^
@end;

@template ExternalConstructorHeader(%Class,%Arguments) is
$%Class::%Class(%Arguments)\^
@end;

@template ExternalMethodHeader(%Class,%Virtual,%RetSpec,%Return,%And,%MethodName,%Arguments,%MetSpec) is
$%Virtual %RetSpec %Return%And %Class::%MethodName(%Arguments) %MetSpec\^
@end;

@template MethodTemplateDec(%MethodComment,%Method) is
$
$%MethodComment
$Standard_EXPORT %Method;
@end;

@template MethodTemplateDecInlineWNT(%MethodComment,%Method) is
$%MethodComment
$%Method;
@end;

@template InlineMethodTemplateDec(%Method) is
$%Method\^
@end;

@template MethodTemplateDef(%Method,%MBody) is
$%Method
${
$  %MBody
$}
$
@end;

@template EmptyDestructorTemplate(%Class) is
$Standard_EXPORT ~%Class();
@end;

@template FullEmptyHandleDestructorTemplate(%Class) is
$Handle_%Class::~Handle_%Class() {}
@end;

@template FullEmptyDestructorTemplate(%Class) is
$%Class::~%Class() {}
@end;

-- ===============
-- current methods
-- ===============

-- type management : BEGIN

@template TypeMgtAncestorType(%Nb) is
$aType%Nb\^
@end;

@template TypeMgtAncestor(%Nb,%Ancestors) is
$  static Handle_Standard_Type %Nb = STANDARD_TYPE(%Ancestors);
$  if ( %Nb.IsNull()) %Nb = STANDARD_TYPE(%Ancestors);
@end;

@template TypeMgt(%Class,%Inherits,%Ancestors) is
$
$Standard_EXPORT Handle_Standard_Type& %Class_Type_()
${
$
$  %Inherits 
$
$  static Handle_Standard_Transient _Ancestors[]= {%AncestorsNULL};
$  static Handle_Standard_Type _aType = new Standard_Type("%Class",
$			                                 sizeof(%Class),
$			                                 1,
$			                                 (Standard_Address)_Ancestors,
$			                                 (Standard_Address)NULL);
$
$  return _aType;
$}
@end;

-- type management : END

@template DownCast(%Class,%IClass) is
$// DownCast method
$//   allow safe downcasting
$//
$const Handle(%Class) Handle(%Class)::DownCast(const Handle(%IClass)& AnObject) 
${
$  Handle(%Class) _anOtherObject;
$
$  if (!AnObject.IsNull()) {
$     if (AnObject->IsKind(STANDARD_TYPE(%Class))) {
$       _anOtherObject = Handle(%Class)((Handle(%Class)&)AnObject);
$     }
$  }
$
$  return _anOtherObject ;
$}
@end;

@template DynamicType(%Class) is
$const Handle(Standard_Type)& %Class::DynamicType() const 
${ 
$  return STANDARD_TYPE(%Class) ; 
$}
@end;

@template IsKind(%Class,%IClass) is
$Standard_Boolean %Class::IsKind(const Handle(Standard_Type)& AType) const 
${ 
$  return (STANDARD_TYPE(%Class) == AType || %IClass::IsKind(AType)); 
$}
@end;
