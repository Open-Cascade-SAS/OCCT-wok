-- File:	CPPExt_Standard.edl
-- Author:	Kernel
-- History:	Fri Dec  8 09:59:38 1995	Kernel	Creation
-- Copyright:	 Matra Datavision 1995

@template HandleStandardTransient is
$#ifndef _Handle_Standard_Transient_HeaderFile
$#define _Handle_Standard_Transient_HeaderFile
$
$#include <Standard_Macro.hxx>
$#include <Standard_PrimitiveTypes.hxx>
$#include <Standard_Transient_proto.hxx>
$
$class Standard_Transient;
$class Handle_Standard_Type;
$
$Standard_Integer HashCode(const Handle(Standard_Transient)& , const Standard_Integer );
$
$class Handle(Standard_Transient)
${
$private:
$
$  Standard_Transient* entity;
$
$  void RaiseNullObject (const Standard_CString S) const;
$
$  void BeginScope() const
$  {
$    if (entity != 0) entity->count++;
$  }
$
$  void EndScope()
$  {
$    if (entity != 0)
$    {
$      entity->count--;
$      if (entity->count == 0)
$      {
$	       entity->Delete();
$	       entity = 0;
$	     }
$	   }
$  }
$
$public:
$
$  Handle(Standard_Transient)()
$  {
$    entity = 0;
$  }
$
$  Handle(Standard_Transient)(const Handle(Standard_Transient)& theTid)
$  {
$    entity = theTid.entity;
$    BeginScope();
$  }
$
$  Handle(Standard_Transient)(const Standard_Transient* theItem)
$  {
$    if (!theItem)
$      entity = 0;
$    else
$      entity = (Standard_Transient* )theItem;
$    BeginScope();
$  }
$
$  void Dump (Standard_OStream& out) const;
$  ~Handle(Standard_Transient)();
$
$  void ShallowDump (Standard_OStream&) const;
$
$  bool operator== (const Handle(Standard_Transient)& theRight) const
$  {
$    return entity == theRight.entity;
$  }
$
$  bool operator== (const Standard_Transient* theRight) const
$  {
$    return entity == (Standard_Transient* )theRight;
$  }
$
$  friend bool operator== (const Standard_Transient*         theLeft,
$                          const Handle(Standard_Transient)& theRight)
$  {
$    return theLeft == theRight.entity;
$  }
$
$  bool operator!= (const Handle(Standard_Transient)& theRight) const
$  {
$    return entity != theRight.entity;
$  }
$
$  bool operator!= (const Standard_Transient* theRight) const
$  {
$    return entity != theRight;
$  }
$
$  friend bool operator!= (const Standard_Transient*         theLeft,
$                          const Handle(Standard_Transient)& theRight)
$  {
$    return theLeft != theRight.entity;
$  }
$
$  void Nullify()
$  {
$    EndScope();
$    entity = 0;
$  }
$
$  Standard_Boolean IsNull() const
$  {
$    return entity == 0;
$  }
$
$protected:
$
$  Standard_Transient* Access() const
$  {
$    return entity;
$  }
$
$  Standard_Transient* ControlAccess() const
$  {
$    return entity;
$  }
$
$  void Assign (const Standard_Transient* theItem)
$  {
$    EndScope();
$    entity = (Standard_Transient* )theItem;
$    BeginScope();
$  }
$
$public:
$
$  operator Standard_Transient*()
$  {
$    return Access();
$  }
$
$  Handle(Standard_Transient)& operator= (const Handle(Standard_Transient)& theHandle);
$  Handle(Standard_Transient)& operator= (const Standard_Transient* theItem);
$
$  Standard_Transient* operator->()
$  {
$    return ControlAccess();
$  }
$
$  Standard_Transient* operator->() const
$  {
$    return ControlAccess();
$  }
$
$  Standard_Transient& operator*()
$  {
$    return *(ControlAccess());
$  }
$
$  const Standard_Transient& operator*() const
$  {
$    return *(ControlAccess());
$  }
$
$  static const Handle(Standard_Transient) DownCast (const Handle(Standard_Transient)& theObject);
$
$  friend void ShallowDump (const Handle_Standard_Transient&, Standard_OStream&);
$
$};
$
$#include <Standard_Type.hxx>
$
$#endif
@end;

@template StandardTransient is 
$#ifndef _Standard_Transient_HeaderFile
$#define _Standard_Transient_HeaderFile
$
$#include <Handle_Standard_Transient.hxx>
$#include <Standard_PrimitiveTypes.hxx>
$#include <Standard_Transient_proto.hxx>
$#include <Standard_Type.hxx>
$
$#endif
@end;

@template StandardErrorHandler is
$#ifndef _Standard_ErrorHandler_HeaderFile
$#define _Standard_ErrorHandler_HeaderFile
$
$#include <Standard_Failure.hxx>
$
$#include <stdlib.h>
$#include <setjmp.h>
$
$//! Define the syntaxe "try" and "catch".
$class Standard_ErrorHandler
${
$  friend class Standard_Failure; // To execute the raise exception
$
$public:
$
$  Standard_ErrorHandler();
$  ~Standard_ErrorHandler();
$  Standard_Boolean Catches (const Handle(Standard_Type)& );
$
$private:
$
$  static void                     Abort();
$  static void                     Error (const Handle(Standard_Failure)& );
$  static Handle(Standard_Failure) LastCaughtError();
$
$private:
$
$  Standard_ErrorHandler*   Previous;
$  Handle(Standard_Failure) CaughtError;
$
$public:
$
$  jmp_buf Label;
$
$};
$
$#include <Standard_ErrorHandler.lxx>
$
$#endif // _Standard_ErrorHandler_HeaderFile
@end;

@template StandardSStream is 
$#ifndef _Standard_SStream_HeaderFile
$#define _Standard_SStream_HeaderFile
$
$#include <strstream.h>
$
$class Handle_Standard_Type;
$Handle_Standard_Type& Standard_SStream_Type_();
$
$class Standard_SStream : public strstreambase, public ostream
${
$
$public:
$  Standard_SStream();
$  Standard_SStream(ostream& );
$
$  ~Standard_SStream();
$};
$
$#endif // _Standard_SStream_HeaderFile
@end;

@template StandardIStream is
$#ifndef _Standard_IStream_HeaderFile
$#define _Standard_IStream_HeaderFile
$
$#include <stream.h>
$
$class Handle_Standard_Type;
$Handle_Standard_Type& Standard_IStream_Type_();
$#define Standard_IStream istream
$
$#endif // _Standard_IStream_HeaderFile
@end;

@template StandardOStream is
$#ifndef _Standard_OStream_HeaderFile
$#define _Standard_OStream_HeaderFile
$
$#include <stream.h>
$
$class Handle_Standard_Type;
$Handle_Standard_Type& Standard_OStream_Type_();
$#define Standard_OStream ostream
$
$#endif // _Standard_OStream_HeaderFile
@end;

@template HandleStandardPersistent is
$//============================================================================
$//
$// Title : Handle_Standard_Persistent.hxx 
$// Role  : This file just include <Standard_Persistent.hxx>
$//
$//============================================================================
$
$#ifndef _Handle_Standard_Persistent_HeaderFile
$#define _Handle_Standard_Persistent_HeaderFile
$
$#include <Handle_StandardDB_Persistent.hxx>
$
$#endif // _Handle_Standard_Persistent_HeaderFile
@end;
